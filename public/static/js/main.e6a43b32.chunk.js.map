{"version":3,"sources":["queries/index.ts","components/Spinner/Spinner.tsx","components/UserList/UserList.tsx","components/Navbar/Navbar.tsx","components/Posts/Post.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GET_USERS","gql","GET_POSTS","Spinner","className","role","aria-hidden","UserList","useQuery","loading","data","error","useState","user","setUser","show","setShow","handleClose","users","map","u","id","onClick","selectUser","src","avatar","alt","name","email","address","city","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","Navbar","bg","expand","to","Brand","Toggle","aria-controls","Collapse","Nav","Link","Posts","postId","setPostId","posts","value","title","body","client","ApolloClient","uri","cache","InMemoryCache","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6a43b32.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nconst GET_USERS = gql`\n  {\n    users {\n        id\n        name\n        avatar    \n        email  \n        address {\n            city\n        }\n    }\n  }\n`\n\nconst GET_POSTS = gql`\n  {\n    posts {\n      id\n      title\n      body\n      user {\n        name\n        avatar\n      }\n    }\n  }\n`\n\n\nexport { GET_USERS, GET_POSTS }","\nfunction Spinner() {\n  return (\n    <div className=\"d-flex justify-content-center\">\n        <div className=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\n    </div>\n  );\n}\n\nexport default Spinner;\n","import { useQuery } from '@apollo/client';\nimport React, { useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { User } from '../../model/User';\nimport { GET_USERS } from '../../queries';\nimport Spinner from '../Spinner/Spinner';\nimport './UserList.css';\n\nfunction UserList() {\n  const { loading, error, data } = useQuery(GET_USERS);\n  const [user, setUser] = useState<User | null>(null);\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => {\n    setShow(false); \n    setUser(null);\n  }\n  \n  function selectUser(user: User) {\n    setUser(user);\n    setShow(true);\n  }\n  function setSelectedUserClass(id: string) {\n    return id === user?.id ? 'card flex-grow-1 is-selected' : 'card flex-grow-1';\n}\n  function displayUsers() {\n    if (loading) {\n      return <div className=\"card\">\n        <div className=\"card-body\">\n          <Spinner />\n        </div>\n      </div>\n    } else {\n      return data.users.map((u: User) => {\n        return <div\n            className={setSelectedUserClass(u.id)}\n            key={u.id}\n            onClick={() => selectUser(u)}>\n          <div className=\"card-body d-flex flex-row shadow-lg p-3 bg-body rounded\">\n            <img src={u.avatar} alt=\"\" />\n            <div className=\"card-content\">\n              <h5 className=\"card-title\">{u.name}</h5>\n              <h6 className=\"card-subtitle mb-2 text-muted\">{u.email}</h6>\n              <h6 className=\"card-subtitle mb-2 text-muted location\">\n                <img src=\"/icons/location.svg\" />{u.address.city}\n              </h6>\n            </div>\n\n          </div>\n        </div>\n      })\n    }\n  }\n  return (\n    <div className=\"container user-list d-flex flex-wrap\">\n      { displayUsers()}\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton className=\"user-list\">\n          <Modal.Title>\n            <img src={user?.avatar} alt=\"\" />\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nexport default UserList;\n","\nimport { Navbar as BootstrapNavbar, Nav } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nfunction Navbar() {\n    return (\n        <BootstrapNavbar bg=\"light\" expand=\"lg\">\n            <LinkContainer to=\"/\">\n                <BootstrapNavbar.Brand>Ninja Blog</BootstrapNavbar.Brand>\n            </LinkContainer>\n            <BootstrapNavbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <BootstrapNavbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <LinkContainer to=\"/blogs\">\n                        <Nav.Link>Blogs</Nav.Link>\n                    </LinkContainer>\n                    <LinkContainer to=\"/bloggers\">\n                        <Nav.Link>Bloggers</Nav.Link>\n                    </LinkContainer>\n                </Nav>\n            </BootstrapNavbar.Collapse>\n        </BootstrapNavbar>\n    );\n}\n\nexport default Navbar;\n","import { useQuery } from \"@apollo/client\";\nimport { useState } from \"react\";\nimport { Post } from \"../../model/Post\";\nimport { GET_POSTS } from \"../../queries\";\nimport Spinner from \"../Spinner/Spinner\";\nimport './Posts.css';\nfunction Posts() {\n    const { loading, error, data } = useQuery(GET_POSTS);\n    const [postId, setPostId] = useState('');\n\n    function selectPost(value: string) {\n        setPostId(value);\n    }\n\n    function setSelectedPostClass(id: string) {\n        return id === postId ? 'card is-selected' : 'card';\n    }\n\n    function setContainerClass() {\n        return postId ? 'container-md posts selected' : 'container-md posts'\n    }\n\n    function displayPosts() {\n        if (loading) {\n            return <div className=\"card\">\n                <div className=\"card-body\">\n                    <Spinner />\n                </div>\n            </div>\n        } else {\n            return data.posts.map((u: Post) => {\n                return <div\n                    className={setSelectedPostClass(u.id)}\n                    key={u.id}\n                    onClick={() => selectPost(u.id)}\n                >\n                    <div className=\"card-body d-flex flex-row shadow-lg p-3 bg-body rounded\">\n                        <div className=\"card-content\">\n                            <h5 className=\"card-title\">{u.title}</h5>\n                            <h6 className=\"card-subtitle mb-2 text-muted\">{u.body}</h6>\n                        </div>\n                        <div className=\"flex-fill\">\n                            <img src={u.user.avatar} alt=\"\" className=\"shadow-sm mb-3 bg-body\" />\n                            <h6 className=\"card-subtitle mb-2 text-muted\">{u.user.name}</h6>\n                        </div>\n                    </div>\n                </div>\n            })\n        }\n    }\n    return (\n        <div className={setContainerClass()}>\n            { displayPosts()}\n        </div>\n    );\n}\n\nexport default Posts;\n","import React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport UserList  from './components/UserList/UserList'\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from './components/Navbar/Navbar';\nimport Posts from './components/Posts/Post';\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>      \n      <Router>\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/\" component={Posts} />\n          <Route path=\"/blogs\" component={Posts} />\n          <Route path=\"/bloggers\" component={UserList} />          \n        </Switch>        \n      </Router>       \n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-reboot.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}